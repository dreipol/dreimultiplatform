buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }

    }

    dependencies {
        classpath("com.android.tools.build:gradle:${versions_android_gradle_plugin}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$versions_kotlin")
        classpath("org.jlleitschuh.gradle:ktlint-gradle:$versions_linter")
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$versions_dokka"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$versions_nexus_staging"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
plugins {
    id("com.android.library")
    id("org.jetbrains.kotlin.multiplatform")
    id("maven-publish")
    id("signing")
}
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "org.jetbrains.dokka"
apply plugin: "io.codearte.nexus-staging"


allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
}

group = "ch.dreipol"


kotlin {
    ios("ios") {
        binaries {
            framework()
        }
    }

    android("android") {
        publishAllLibraryVariants()
    }

    sourceSets["commonMain"].dependencies {
        api("org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions_coroutines")
        api("org.reduxkotlin:redux-kotlin-threadsafe:$versions_redux_kotlin")
        api("org.reduxkotlin:reselect:$versions_redux_kotlin")
        api "org.reduxkotlin:redux-kotlin-thunk:$versions_redux_kotlin"
        api("co.touchlab:kermit:$versions_kermit")
    }

    sourceSets["androidMain"].dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions_kotlin"
        implementation("androidx.appcompat:appcompat:$versions_app_compat")
        implementation("com.google.android.play:core:$versions_play_core")
        implementation("com.google.android.play:core-ktx:$versions_play_core_ktx")
    }

    sourceSets["iosMain"].dependencies {
    }
}

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 23
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
        }
    }
    buildTypes {
        //This is for MultiplatformSettings
        debug {
            // MPP libraries don't currently get this resolution automatically
            matchingFallbacks = ['release']
        }
        release {
            minifyEnabled false
        }
    }
}


// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

ktlint {
    ignoreFailures.set(false)
    filter {
        exclude { element -> element.file.path.contains("generated/") }
        exclude { element -> element.file.path.contains("reduxkotlin/") }
    }
}

tasks["build"].dependsOn("ktlintFormat")

task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaHtml, group: 'publishing') {
    classifier('javadoc')
    from "$buildDir/javadoc/common"
}

publishing {
    publications.all { pub ->
        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = DELEGATE_FIRST

                name 'dreimultiplatform'
                description 'Shared Repository for KMM projects'
                url 'https://github.com/dreipol/dreimultiplatform'
                scm {
                    url 'https://github.com/dreipol/dreimultiplatform'
                    connection 'scm:https://github.com/dreipol/dreimultiplatform.git'
                    developerConnection 'scm:git://github.com/dreipol/dreimultiplatform.git'
                }
                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'melbic'
                        name 'Samuel Bichsel'
                        email 'samuel.bichsel@dreipol.ch'
                    }
                    developer {
                        id 'kaiwidmer'
                        name 'Kai Widmer'
                        email 'kai.widmer@dreipol.ch'
                    }
                    developer {
                        id 'tschuls'
                        name 'Julia Strasser'
                        email 'julia.strasser@dreipol.ch'
                    }
                    developer {
                        id 'Nils-Becker'
                        name 'Nils Becker'
                        email 'nils.becker@dreipol.ch'

                    }
                }
            }
        }

        artifact dokkaJavadocCommonJar

        repositories {
            def releaseUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"

            maven {
                url !version.contains("SNAPSHOT") ? releaseUrl : snapshotUrl
                def nexusUsername = ""
                if (project.hasProperty('nexusUsername')) {
                    nexusUsername = project.getProperty('nexusUsername')
                }
                def nexusPassword = ""
                if (project.hasProperty('nexusPassword')) {
                    nexusPassword = project.getProperty('nexusPassword')
                }
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }

    signing {
        def signingKey = System.getProperty("PGP_KEY")
        def signingPassword = ""
        if (project.hasProperty('signing.password')) {
            signingPassword = project.getProperty('signing.password')
        }
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }

    nexusStaging {
        serverUrl "https://s01.oss.sonatype.org/service/local"
    }
}